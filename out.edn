[{:content "\"## Keyboard Shortcuts\n\n| **Keys**                 | **Action**                                                                   |\n|:------------------------ |:---------------------------------------------------------------------------- |\n| **Enter**                | Creates a new entity when cursor is over an empty space.                     |\n| **Ctrl-Arrows**          | Move the highlighted cell(s).                                                |\n| **Shift-Up/Down Arrows** | Cycles the active cell through editor, value, control, or off display modes. |\n| **Ctrl-Shift-Arrows**    | Resize the highlighted cell.                                                 |\n| **Ctrl-s**               | Save the Entities to 'out.edn'                                               |\n| **Ctrl-d**               | Delete the highlighted entity. Careful, there's no undo yet!                 |\"", :timers nil, :size [28 20], :id 0, :display :note, :error nil, :location [1 33]} {:content "\"## badspreadsheet\n\nA Clojure Design Tool.\n\nWelcome to the badspreadsheet prototype. I hope you have some fun playing around, I know I've enjoyed this tool, even in its messy state ðŸ¤“!\n\nSince this is a prototype, please temper your epxectations and don't build anything critical here yet, because I can't guarantee you'll be able to save it if something goes wrong.\n\nIf you're curious what you can do, have a look at the other cells.\n\nYou'll want to have a peak at the keyboard shortcuts, especially because I haven't implemented all actions with the mouse yet.\n\nAnd you'll probably want to know how you can actually connect cells too, The 'quickstart' cell should shed a bit of light on that for you too.\n\nBeyond the specifics of your time in the spreadsheet, please have a look at the project's Github page:\n\n[badspreadsheet](https://github.com/adam-james-v/badspreadsheet) to leave issues, or watch the project, or star it if you feel so inclined.\"", :timers nil, :size [28 31], :id 1, :display :note, :error nil, :location [1 1]} {:content "(require\n  '[svg-clj2.elements :as el]\n  '[svg-clj2.path :as path]\n  '[svg-clj2.transforms :as tf]\n  '[svg-clj2.parametric :as p]\n  '[svg-clj2.layout :as lo]\n  '[svg-clj2.composites :refer [svg]])", :timers nil, :size [18 7], :id 3, :display :content, :error nil, :location [30 1]} {:content "\"## Sheet Functions\n\n| **Function** | **Behaviour** |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| `(c# id)`      | Link the cell `id` to the cell you're currently editing. Gets its value and re-renders whenever the referenced cell updates        |\n| `(l# [x y])` | Link the cell at the specified absolute location to the cell you're currently editing. *Warning:* this doesn't work perfectly yet. |\n| `(t# ms)`    | Create a cell whose value increases every number of milliseconds `ms`                                                  |\"", :timers nil, :size [28 17], :id 5, :display :note, :error nil, :location [1 54]} {:content ";; Shape definition. Render\n;; Is in another cell (ID 14)\n\n(let [pts (p/regular-polygon-pts (c# 7) (c# 11))]\n   (-> (path/polygon pts)\n     (tf/style {:fill \"none\"\n                :stroke \"purple\"})\n     (tf/rotate 20)\n     (tf/translate [0 0])))", :timers nil, :size [22 8], :id 6, :display :content, :error nil, :location [30 16]} {:content "36", :timers nil, :size [3 2], :id 7, :display :control, :error nil, :location [38 13]} {:content "\"### RADIUS: \"", :timers nil, :size [5 2], :id 8, :display :note, :error nil, :location [32 13]} {:content "\"### SIDES: \"", :timers nil, :size [4 2], :id 10, :display :note, :error nil, :location [33 10]} {:content "6", :timers nil, :size [3 2], :id 11, :display :control, :error nil, :location [38 10]} {:content ";; Edit this and see its render in the connected cell (ID 15)!\n\n(let [n-shapes (c# 16)\n      curve (p/bezier (c# 13))\n      path-pts (mapv curve (range 0 1 0.1))\n      pts (mapv #(curve (/ % (double n-shapes))) (range n-shapes))\n      shape (c# 6)]\n  (el/g\n    (-> (path/polyline path-pts)\n      (tf/translate [0 0])\n      (tf/style {:fill \"none\"\n                 :stroke \"black\"}))\n    (lo/pattern-on-pts shape pts)))", :timers nil, :size [38 40], :id 12, :display :content, :error nil, :location [31 30]} {:content ";; Bezier curve pts\n\n[[0 0]\n [120 20]\n [420 0]\n [200 -50]\n [500 500]]", :timers nil, :size [10 7], :id 13, :display :content, :error nil, :location [53 21]} {:content "(svg (c# 6))", :timers nil, :size [14 14], :id 14, :display :value, :error nil, :location [55 2]} {:content "(svg (c# 12))", :timers nil, :size [37 41], :id 15, :display :note, :error nil, :location [71 30]} {:content "30", :timers nil, :size [7 3], :id 16, :display :control, :error nil, :location [41 25]} {:content "\"### N Shapes\"", :timers nil, :size [6 3], :id 17, :display :note, :error nil, :location [34 25]}]